@page "/product"
@inject ProductService _db
@using BlazorInputFile
@using System.IO


<div class="container-fluid p-4">
    <div class="row justify-content-between border border-info">
        <div class="col-sm-12 col-md-5">
            <h1 class="text-info">Products List</h1>
        </div>
        <div class="col-sm-12 col-md-3 text-right">
            <button type="button" class="btn btn-info form-control my-2" @onclick="AddNewProduct">Add new product</button>
        </div>
    </div>
    @if (products is null)
    {
        <div class="row">
            <div class="col text-center">
                <img src="https://media2.giphy.com/media/3oEjI6SIIHBdRxXI40/200.gif" height="200" />
            </div>
        </div>
    }
    else if (products.Any())
    {
        <div class="row">
            <table class="table table-striped">
                <thead class="bg-info">
                    <tr>
                        <th>Image:</th>
                        <th>Product name:</th>
                        <th>Category name:</th>
                        <th>Price:</th>
                        <th>Shade Color:</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in products)
                    {
                    <tr>
                        <td>@item.Image</td>
                        <td>@item.Name</td>
                        <td>@item.Category.Name</td>
                        <td>@item.Price</td>
                        <td>@item.ShadeColor</td>
                    </tr>
                    }
                </tbody>
                <tfoot>
                    <tr>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td>
                            Product Count: @products.Count
                        </td>
                    </tr>
                </tfoot>
            </table>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col text-center">
                <img src="https://cdn.dribbble.com/users/1231865/screenshots/11157048/media/bc9427646c632ded563ee076fdc5dfda.jpg?compress=1&resize=400x300" height="200" />
            </div>
        </div>
    }
</div>

@if (showModal)
{   
    if (isDetails)
    {
        <DetailsModalProduct productObj="@productObj" OnCloseModal="CloseModal" />
    }
    else
    {
        <AddEditModalProduct productObj="productObj" OnCloseModal="CloseModal" OnValidSubmitHandler="ValidSubmitHandler" Categories="categories" SpecialTags="specialTags" OnSelectionCategoryChanged="SelectionCategoryChanged" OnSelectionSpecialTagsChanged="SelectionSpecialTagsChanged" />
    }
}




@code {
    List<Product> products;
    List<SpecialTag> specialTags;
    List<Category> categories;
    Product productObj = new();
    bool showModal = false;
    public byte[] ImageUploaded { get; set; }
    bool isDetails = false;

    protected override async Task OnInitializedAsync()
    {
        products = await _db.GetAllProductsAsync();
        specialTags = await _db.GetAllSpecialTagsAsync();
        categories = await _db.GetAllCategoriesAsync();
    }
    void AddNewProduct()
    {
        productObj = new();
        productObj.Id = 0;
        showModal = true;
    }
    void CloseModal()
    {
        showModal = false;
        isDetails = false;
    }
    async Task HandleSelection(IFileListEntry[] files)//  Асинхронный метод, который обрабатывает файлы загруженные через форму 
    {
        var file = files.FirstOrDefault();
        if (file is not null)
        {
            MemoryStream memoryStream = new();
            await file.Data.CopyToAsync(memoryStream);// асинхронно скопировать картинку в ОП
            ImageUploaded = memoryStream.ToArray();//Преобразование картинки в массив байтов
        }
    }
    string ImageToDisplayConverter(byte[] image)// Метод преобразования массива байтов обратно в картинку
    {
        if (image is null)
            return "";
        var base64 = Convert.ToBase64String(image);
        var finalString = string.Format("data:image/jpg;base64,{0}", base64);

        return finalString;
    }
    async Task ValidSubmitHandler()
    {
        bool result = false;
        showModal = false;

        if (productObj.Id.Equals(0))
        {
            result = await _db.CreateProductAsync(productObj);
        }
        else
        {
            result = await _db.UpdateProductAsync(productObj);
        }
        products = await _db.GetAllProductsAsync();
    }
    void EditProductHandler(Product productForEdit)
    {
        productObj = productForEdit;
        showModal = true;
    }
    async Task DeleteProductHandler(Product productForDeletion)
    {
        bool result = false;
        result = await _db.DeleteProductAsync(productForDeletion);
        products.Clear();
        products = await _db.GetAllProductsAsync();
    }
    void DetailsProductHandler(Product productDetails)
    {
        productObj = productDetails;
        isDetails = true;
        showModal = true;
    }
    void SelectionCategoryChanged(ChangeEventArgs args)
    {
        if(int.TryParse(args.Value.ToString(),out int id))// Парсинг стринговой переменной в int
        {
            productObj.CategoryId = id;
        }
    }
    void SelectionSpecialTagsChanged(ChangeEventArgs args)
    {
        if(int.TryParse(args.Value.ToString(),out int id))
        {
            productObj.SpecialTagId = id;
        }
    }

}

