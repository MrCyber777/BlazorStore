@page "/product"
@page "/product/{PageNumber:int}"

@using BlazorInputFile
@using System.IO
@using BlazorStore.Utility
@using BlazorStore.Extensions
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Text



@inject ProductService _db
@inject ProtectedLocalStorage _protectedLocalStorage




@attribute [Authorize(Roles = SD.AdminEndUser + "," + SD.SuperAdminEndUser)]

<div class="container-fluid p-4">
    <div class="row justify-content-between border border-info">
        <div class="col-sm-12 col-md-5">
            <h1 class="text-info">Products List</h1>
        </div>
        <div class="col-sm-12 col-md-3 text-right">
            <button type="button" class="btn btn-info form-control my-2" @onclick="AddNewProduct">Add new product</button>
        </div>
    </div>
    @if (products is null)
    {
        <div class="row">
            <div class="col text-center">
                <img src="https://media2.giphy.com/media/3oEjI6SIIHBdRxXI40/200.gif" height="200" />
            </div>
        </div>
    }
    else if (products.Any())
    {

        @*<span><a href="/product/@i">|</a></span>*@
        <nav aria-label="Page navigation example">
            <ul class="pagination justify-content-center">
                <li class="page-item @((PageNumber<=1)?"disabled":"")">
                    <a class="page-link" href="product/@(PageNumber-1)" aria-disabled="@((PageNumber<=1) ?"true":"false")">Previous</a>
                </li>
                @for (int i = 1; i <= SD.PageSize+1; i++)
                {
                    <li class="page-item @((PageNumber==i)?"active":"")"><a class="page-link" href="product/@i">@i</a></li>
                }
                <li class="page-item @((PageNumber<=totalCount/SD.PageSize)?"":"disabled")">
                    <a class="page-link" href="product/@(PageNumber+1)" aria-disabled="@((PageNumber<=totalCount/SD.PageSize?"false":"true"))">Next</a>
                </li>
            </ul>
        </nav>

        <div class="row">
            <table class="table table-striped my-3">
                <thead class="bg-info">
                    <tr>
                        <th>Image:</th>
                        <th>Product name:</th>
                        <th>Category name:</th>
                        <th>Special Tag:</th>
                        <th>Price:</th>
                        <th>Shade Color:</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in products)
                    {
                        <tr>
                            @if (item.Image is not null)
                            {
                                <td><img src="@ImageToDisplayConverter(item.Image)" width="100" /></td>
                            }
                            else
                            {
                                <td>
                                    <img src="https://st4.depositphotos.com/1028437/21297/v/600/depositphotos_212975764-stock-illustration-image-available-sign.jpg" width="100" />
                                </td>
                            }
                            <td>@item.Name</td>
                            <td>@item.Category.Name</td>
                            <td>@item.SpecialTag.Name</td>
                            <td>@item.Price</td>
                            <td>@item.ShadeColor</td>
                            <td>
                                <div class="btn-group">
                                    <button class="btn btn-info" type="button" @onclick="(()=>DetailsProductHandler(item))"> <i class="fas fa-info"></i></button>
                                    <button class="btn btn-primary" type="button" @onclick="(()=>EditProductHandler(item))"><i class="far fa-edit"></i></button>
                                    <button class="btn btn-danger" type="button" @onclick="(()=>DeleteProductHandler(item))"><i class="fas fa-trash"></i></button>

                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
                <tfoot>
                    <tr>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td>
                            Product Count: @totalCount
                        </td>
                    </tr>
                </tfoot>
            </table>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col text-center">
                <img src="https://cdn.dribbble.com/users/1231865/screenshots/11157048/media/bc9427646c632ded563ee076fdc5dfda.jpg?compress=1&resize=400x300" height="200" />
            </div>
        </div>
    }
</div>


<ProductModal @ref="modal" ProductDetails="productObj" OnCancel="CloseModal" OnConfirm="ValidSubmitHandler" OnHandleSelection="HandleSelection" OnSelectionCategoryChanged="SelectionCategoryChanged" OnSelectionSpecialTagsChanged="SelectionSpecialTagsChanged" Categories="categories" SpecialTags="specialTags" />




@*if (showModal)
    {


    if (isDetails)
        {
            <DetailsModalProduct productObj="productObj" OnCloseModal="CloseModal" />
        }
        else
        {
            <AddEditDetailsModalProduct productObj="productObj" OnCloseModal="CloseModal" OnValidSubmitHandler="ValidSubmitHandler" Categories="categories" SpecialTags="specialTags" OnSelectionCategoryChanged="SelectionCategoryChanged" OnSelectionSpecialTagsChanged="SelectionSpecialTagsChanged" OnHandleSelection="HandleSelection" />
        }

     <AddEditDetailsModalProduct  ModalState="modalState"  productObj = "productObj" OnCloseModal = "CloseModal" OnValidSubmitHandler = "ValidSubmitHandler" Categories = "categories" SpecialTags = "specialTags" OnSelectionCategoryChanged = "SelectionCategoryChanged" OnSelectionSpecialTagsChanged = "SelectionSpecialTagsChanged" OnHandleSelection = "HandleSelection" />

    }
*@




@code {
    [Parameter] public int PageNumber { get; set; }


    List<Product> products;
    List<SpecialTag> specialTags;
    List<Category> categories;

    Product productObj = new();
    bool showModal = false;
    public byte[] ImageUploaded { get; set; }
    //bool isDetails = false;
    ModalStateEnum modalState = new();
    ProductModal modal;

    //int pageSize = 7;
    int totalCount;
    //int pageNumber = 1;

    protected override async Task OnInitializedAsync()
    {
        specialTags = await _db.GetAllSpecialTagsAsync();
        categories = await _db.GetAllCategoriesAsync();

        //modalState = ModalStateEnum.None;
    }

    protected override void OnParametersSet()
    {
        if (PageNumber < 1)
            PageNumber = 1;

        products = _db.GetSortedProductsAsync(PageNumber, out totalCount);
    }


    void AddNewProduct()
    {
        productObj = new();
        productObj.Id = 0;
        modalState = ModalStateEnum.Create;
        modal.Show(modalState);
        //showModal = true;
    }

    void CloseModal()
    {
        modal.Hide();
        //showModal = false;
        //modalState = ModalStateEnum.None;
        //isDetails = false;
    }
    async Task HandleSelection(IFileListEntry[] files)//  Асинхронный метод, который обрабатывает файлы загруженные через форму
    {
        var file = files.FirstOrDefault();
        if (file is not null)
        {
            MemoryStream memoryStream = new();
            await file.Data.CopyToAsync(memoryStream);// асинхронно скопировать картинку в ОП
            ImageUploaded = memoryStream.ToArray();//Преобразование картинки в массив байтов
            productObj.Image = ImageUploaded;
        }
    }
    string ImageToDisplayConverter(byte[] image)// Метод преобразования массива байтов обратно в картинку
    {
        if (image is null)
            return "";
        var base64 = Convert.ToBase64String(image);
        var finalString = string.Format("data:image/jpg;base64,{0}", base64);

        return finalString;
    }
    async Task ValidSubmitHandler(Product _prodDetails)
    {
        bool result = false;
        //showModal = false;
        modal.Hide();

        if (modalState.Equals(ModalStateEnum.Create))
        {
            result = await _db.CreateProductAsync(_prodDetails);
        }
        else if (modalState.Equals(ModalStateEnum.Update))
        {
            result = await _db.UpdateProductAsync(_prodDetails);
        }
        else if (modalState.Equals(ModalStateEnum.Delete))
        {
            result = await _db.DeleteProductAsync(_prodDetails);
            products.Clear();
        }

        products = _db.GetSortedProductsAsync(PageNumber, out totalCount);
    }
    void EditProductHandler(Product productForEdit)
    {
        productObj = productForEdit;
        modalState = ModalStateEnum.Update;
        modal.Show(modalState);
        //showModal = true;
    }
    void DeleteProductHandler(Product productForDeletion)
    {
        productObj = productForDeletion;
        modalState = ModalStateEnum.Delete;
        modal.Show(modalState);
        //showModal = true;
    }
    void DetailsProductHandler(Product productDetails)
    {
        productObj = productDetails;
        modalState = ModalStateEnum.Read;
        modal.Show(modalState);
        //showModal = true;
    }
    void SelectionCategoryChanged(ChangeEventArgs args)
    {
        if (int.TryParse(args.Value.ToString(), out int id))// Парсинг стринговой переменной в int
        {
            productObj.CategoryId = id;
        }
    }
    void SelectionSpecialTagsChanged(ChangeEventArgs args)
    {
        if (int.TryParse(args.Value.ToString(), out int id))
        {
            productObj.SpecialTagId = id;
        }
    }
    async Task AddToCart()//ProtectedLocalStorage - переводит данные в хеш формат запоминая контрольную сумму.
    {
        // 1. Получаем все данные из сессии и заносим в локальную переменную типа List<int> listOfShoppingCart
        List<int> listOfShoppingCart = await _protectedLocalStorage.GetFromSession<List<int>>(SD.SessionKey);

        // 2. Проверить на null и, если получили null, то создать новый экземпляр List<int> listOfShoppingCart
        if (listOfShoppingCart is null)
            listOfShoppingCart = new List<int>();

        // 3. Внести (добавить) новые данные в listOfShoppingCart
        listOfShoppingCart.Add(productObj.Id);

        // 4. Записать listOfShoppingCart в сессию пользователя (методом расширения)
        await _protectedLocalStorage.SetForSession(SD.SessionKey, listOfShoppingCart);

        // 5. Оповестить Blazor о обновлении данных явно
        StateHasChanged();
    }


}

