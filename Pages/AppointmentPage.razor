@page "/appointment"
@using BlazorInputFile
@using System.IO

@inject AppointmentService _db
@inject ProductService _prod
@inject PaymentService _payment
@attribute [Authorize(Roles ="Admin")]
<div class="container-fluid p-4">
    <div class="row justify-content-between text-center">
        <div class="col-sm-12 col-md-12">
            <h1 class="text-info">Appointments</h1>
        </div>
        @*
            <div class="col-sm-12 col-md-3 text-right">
                @*// TODO: Search Field and input
            </div>
        *@
    </div>
    @if (appointments is null)
    {
        <div class="row">
            <div class="col text-center">
                <img src="https://media2.giphy.com/media/3oEjI6SIIHBdRxXI40/200.gif" height="200" />
            </div>
        </div>
    }
    else if (appointments.Any())
    {
        <div class="row">


            <table class="table table-striped">
                <thead class="bg-info">
                    <tr>
                        <th>Customer Name</th>
                        <th>Appointment Day</th>
                        <th>Customer Number</th>
                        <th>Customer Email</th>
                        <th>Is Confirmed</th>
                    </tr>
                </thead>

                <tbody>
                    @foreach (var item in appointments)
                    {
                        <tr>
                            <td>@item.CustomerName</td>
                            <td>@item.AppointmentDay</td>
                            <td>@item.CustomerPhoneNumber</td>
                            <td>@item.CustomerEmail</td>

                            <td>
                                <div class="btn-toolbar form-group">
                                    <button type="button" class="btn btn-success mr-1 my-1">Confirm</button>
                                    <button type="button" class="btn btn-primary mr-1 my-1" @onclick="()=>EditAppointmentHandler(item)">Edit</button>
                                    <button type="button" class="btn btn-warning mr-1 my-1" @onclick="ShowProducts">Show Products</button>
                                    @*<button type="button" class="btn btn-warning mr-1"@onclick="()=>PaymentDetailsHandler(item.Payment)">Payment Details</button>*@
                                    <button type="button" class="btn btn-danger mr-1 my-1" @onclick="()=>DeleteAppointmentHandler(item)">Delete</button>
                                </div>
                            </td>
                            @*//TODO*@
                        </tr>

                    }
                </tbody>
                <tfoot>
                    <tr>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td>
                            Appointment Count: @appointments.Count
                        </td>
                    </tr>
                </tfoot>
            </table>


        </div>
    }
    else
    {
        <div class="row">
            <div class="col text-center">
                <img src="https://cdn.dribbble.com/users/1231865/screenshots/11157048/media/bc9427646c632ded563ee076fdc5dfda.jpg?compress=1&resize=400x300" height="200" />
            </div>
        </div>
    }
    @*@if (showModal)
        {
            if (isDetails)
            {
                <DetailsModalAppointment appointmentObj="appointmentObj" OnCloseModal="CloseModal" />
            }
            else
            {
                <AddEditModalAppointment appointmentObj="appointmentObj" OnCloseModal="CloseModal" OnValidSubmitHandler="ValidSubmitHandler"/>
            }
        }*@
</div>
@*<ProductModal @ref="modal" ProductDetails="productObj" OnCancel="CloseModal" OnConfirm="ValidSubmitHandler" OnHandleSelection="HandleSelection" OnSelectionCategoryChanged="OnSelectionCategoryChanged" OnSelectionSpecialTagsChanged="OnSelectionSpecialTagsChanged" Categories="categories" SpecialTags="specialTags" />*@
@*<AppointmentModal @ref="modal" AppointmentDetails="appointmentObj" OnConfirm="ValidSubmitHandler" OnHandleSelection="HandleSelection" />*@
<DetailsModalProduct @ref="modal" ProductDetails="productObj" OnCancel="CloseModal" />
<EditAppointmentModal @ref="_editAppointmentModal" AppointmentDetails="appointmentObj" OnValidSubmitHandler="ValidSubmitHandler" OnCancel="CloseModal" />
@*<DetailsPaymentModal @ref="detailsPaymentModal" PaymenDetails="paymentObj" OnValidSubmitHandler="SubmitHandler" OnCancel="CloseModal"/>*@


@code {
    List<Appointment> appointments;
    List<Product> products;


    [Parameter] public List<Product> Products { get; set; }
    [Parameter] public EventCallback<Payment> OnConfirm { get; set; }



    Appointment appointmentObj = new();
    Product productObj = new();
    bool showModal = false;
    public byte[] ImageUploaded { get; set; }
    //bool isEdit = false;

    ModalStateEnum modalState = new();
    DetailsModalProduct modal;
    EditAppointmentModal _editAppointmentModal;





    protected override async Task OnInitializedAsync()
    {
        appointments = await _db.GetAllAppointmentsAsync();
    }


    void CloseModal()
    {
        modal.Hide();
        _editAppointmentModal.Hide();
        //detailsPaymentModal.Hide();
        //showModal = false;
        //isDetails = false;
    }
    async Task ValidSubmitHandler()
    {
        _editAppointmentModal.Hide();
        //detailsPaymentModal.Hide();
        if (appointmentObj.Id.Equals(0))
        {
            var result = await _db.CreateAppointmentAsync(appointmentObj, Products);
        }
        else
        {
            var result = await _db.UpdateAppointmentAsync(appointmentObj);
        }
        appointments = await _db.GetAllAppointmentsAsync();
    }
    //async Task SubmitHandler()
    //{
    //    detailsPaymentModal.Hide();
    //    if (paymentObj.Id.Equals(0))
    //    {
    //        var result = await _payment.SavePaymentDetailsAsync(paymentObj,Payments);
    //    }
    //    payments = await _payment.GetAllPaymentsAsync();
    //}
    //void   ValidSubmitHandler()
    //{
    //    //int result = 0;
    //    orderDetails = new();
    //    //bool appointmentForDeletion = false;
    //    //showModal = false;
    //    productObj = orderDetails.Products;
    //    modalState = ModalStateEnum.Read;
    //    modal.Show(modalState);
    //    //if (appointmentObj.Id.Equals(0))
    //    //{
    //    //    result = await _db.CreateAppointmentAsync(appointmentObj);
    //    //}
    //    // else
    //    //  {
    //    //result = await _db.UpdateAppointmentAsync(appointmentObj);
    //    //    }
    //    //appointments = await _db.GetAllAppointmentsAsync();
    //}
    void EditAppointmentHandler(Appointment appointmentForEdition)
    {
        appointmentObj = appointmentForEdition;

        modalState = ModalStateEnum.Update;
        _editAppointmentModal.Show(modalState);
        //isEdit = true;
        //showModal = true;
    }
    void ShowProducts()
    {
        modalState = ModalStateEnum.Read;
        modal.Show(modalState);
    }
    //void ShowPaymentDetails()
    //{
    //    modalState = ModalStateEnum.Read;
    //    detailsPaymentModal.Show(modalState);
    //}

    //void DetailsProductHandler(Product productDetails)
    //{
    //    productObj = productDetails;
    //    modalState = ModalStateEnum.Read;
    //    //modal.Show(modalState);
    //    //showModal = true;
    //}
    async Task DeleteAppointmentHandler(Appointment appointmentForDeletion)
    {
        appointmentObj = appointmentForDeletion;
        //modalState = ModalStateEnum.Delete;
        //modal.Show(modalState);
        bool result = false;
        result = await _db.DeleteAppointmentAsync(appointmentForDeletion);
        appointments.Clear();
        appointments = await _db.GetAllAppointmentsAsync();
    }
    void DetailsAppointmentHandler(Appointment appointmentForDetails)
    {
        appointmentObj = appointmentForDetails;
        modalState = ModalStateEnum.Read;
        //modal.Show(modalState);
        //isDetails = true;
        //showModal = true;
    }
    void ProductDetailsHandler(OrderDetails orderDetails)
    {
        productObj = orderDetails.Products;
        modalState = ModalStateEnum.Read;
        //modal.Show(modalState);
    }
    async Task HandleSelection(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (file is not null)
        {
            MemoryStream memoryStream = new();
            await file.Data.CopyToAsync(memoryStream);
            ImageUploaded = memoryStream.ToArray();
            productObj.Image = ImageUploaded;
        }
    }
}
